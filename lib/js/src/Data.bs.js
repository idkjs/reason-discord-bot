// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_module = require("bs-platform/lib/js/caml_module.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_decode = require("@glennsl/bs-json/lib/js/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/lib/js/src/Json_encode.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_chrome_debugger = require("bs-platform/lib/js/caml_chrome_debugger.js");

var Webhook = { };

var $$Permissions = { };

var User = { };

var Presence = { };

var Channel = { };

var Emoji = { };

var Message = { };

var UnknownMessage = Caml_exceptions.create("Data-Record.UnknownMessage");

function op_of_payload(payload) {
  if (typeof payload === "number") {
    if (payload === /* Reconnect */0) {
      return 7;
    } else {
      return 11;
    }
  } else {
    switch (payload.tag | 0) {
      case /* Dispatch */0 :
          return 0;
      case /* Heartbeat */1 :
          return 1;
      case /* Identify */2 :
          return 2;
      case /* StatusUpdate */3 :
          return 3;
      case /* UpdateVoiceState */4 :
          return 4;
      case /* Resume */5 :
          return 6;
      case /* RequestGuildMembers */6 :
      case /* RequestGuildMembersBulk */7 :
          return 8;
      case /* InvalidSession */8 :
          return 9;
      case /* Hello */9 :
          return 10;
      
    }
  }
}

function t_of_payload(payload) {
  if (typeof payload === "number" || payload.tag) {
    return /* Missing */0;
  } else {
    var tmp;
    switch (payload[0].tag | 0) {
      case /* Ready */0 :
          tmp = "READY";
          break;
      case /* Resumed */1 :
          tmp = "RESUMED";
          break;
      case /* ChannelCreate */2 :
          tmp = "CHANNEL_CREATE";
          break;
      case /* ChannelUpdate */3 :
          tmp = "CHANNEL_UPDATE";
          break;
      case /* ChannelDelete */4 :
          tmp = "CHANNEL_DELETE";
          break;
      case /* ChannelPinsUpdate */5 :
          tmp = "CHANNEL_PINS_UPDATE";
          break;
      case /* GuildCreate */6 :
          tmp = "GUILD_CREATE";
          break;
      case /* GuildUpdate */7 :
          tmp = "GUILD_UPDATE";
          break;
      case /* GuildDelete */8 :
          tmp = "GUILD_DELETE";
          break;
      case /* GuildBanAdd */9 :
          tmp = "GUILD_BAN_ADD";
          break;
      case /* GuildBanRemove */10 :
          tmp = "GUILD_BAN_REMOVE";
          break;
      case /* GuildEmojisUpdate */11 :
          tmp = "GUILD_EMOJIS_UPDATE";
          break;
      case /* GuildIntegrationsUpdate */12 :
          tmp = "GUILD_INTEGRATIONS_UPDATE";
          break;
      case /* GuildMemberAdd */13 :
          tmp = "GUILD_MEMBER_ADD";
          break;
      case /* GuildMemberRemove */14 :
          tmp = "GUILD_MEMBER_REMOVE";
          break;
      case /* GuildMemberUpdate */15 :
          tmp = "GUILD_MEMBER_UPDATE";
          break;
      case /* GuildMembersChunk */16 :
          tmp = "GUILD_MEMBERS_CHUNK";
          break;
      case /* GuildRoleCreate */17 :
          tmp = "GUILD_ROLE_CREATE";
          break;
      case /* GuildRoleUpdate */18 :
          tmp = "GUILD_ROLE_UPDATE";
          break;
      case /* GuildRoleDelete */19 :
          tmp = "GUILD_ROLE_DELETE";
          break;
      case /* MessageCreate */20 :
          tmp = "MESSAGE_CREATE";
          break;
      case /* MessageUpdate */21 :
          tmp = "MESSAGE_UPDATE";
          break;
      case /* MessageDelete */22 :
          tmp = "MESSAGE_DELETE";
          break;
      case /* MessageDeleteBulk */23 :
          tmp = "MESSAGE_DELETE_BULK";
          break;
      case /* MessageReactionAdd */24 :
          tmp = "MESSAGE_REACTION_ADD";
          break;
      case /* MessageReactionRemove */25 :
          tmp = "MESSAGE_REACTION_REMOVE";
          break;
      case /* MessageReactionRemoveAll */26 :
          tmp = "MESSAGE_REACTION_REMOVE_ALL";
          break;
      case /* PresenceUpdate */27 :
          tmp = "PRESENCE_UPDATE";
          break;
      case /* TypingStart */28 :
          tmp = "TYPING_START";
          break;
      case /* UserUpdate */29 :
          tmp = "USER_UPDATE";
          break;
      case /* VoiceStateUpdate */30 :
          tmp = "VOICE_STATE_UPDATE";
          break;
      case /* VoiceServerUpdate */31 :
          tmp = "VOICE_SERVER_UPDATE";
          break;
      case /* WebhooksUpdate */32 :
          tmp = "WEBHOOKS_UPDATE";
          break;
      
    }
    return /* Field */Caml_chrome_debugger.simpleVariant("Field", [tmp]);
  }
}

function optionalField(key, decoder, json) {
  var match = Json_decode.optional((function (param) {
          return Json_decode.field(key, decoder, param);
        }), json);
  if (match !== undefined) {
    return /* Field */Caml_chrome_debugger.simpleVariant("Field", [Caml_option.valFromOption(match)]);
  } else {
    return /* Missing */0;
  }
}

function update(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          channelId: Json_decode.field("channel_id", Json_decode.string, json)
        };
}

var Webhook$1 = {
  update: update
};

function role(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          name: Json_decode.field("name", Json_decode.string, json),
          color: Json_decode.field("color", Json_decode.$$int, json),
          hoist: Json_decode.field("hoist", Json_decode.bool, json),
          position: Json_decode.field("position", Json_decode.$$int, json),
          permissions: Json_decode.field("permissions", Json_decode.$$int, json),
          managed: Json_decode.field("managed", Json_decode.bool, json),
          mentionable: Json_decode.field("mentionable", Json_decode.bool, json)
        };
}

var $$Permissions$1 = {
  role: role
};

function t(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          username: optionalField("username", Json_decode.string, json),
          discriminator: Json_decode.field("discriminator", Json_decode.string, json),
          avatar: Json_decode.field("avatar", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          bot: optionalField("bot", Json_decode.bool, json),
          mfaEnabled: optionalField("mfa_enabled", Json_decode.bool, json),
          locale: optionalField("locale", Json_decode.string, json),
          verified: optionalField("verified", Json_decode.bool, json),
          email: optionalField("email", Json_decode.string, json),
          flags: optionalField("flags", Json_decode.$$int, json),
          premiumType: optionalField("premium_type", Json_decode.$$int, json)
        };
}

var User$1 = {
  t: t,
  update: t
};

function timestamps(json) {
  return {
          start: optionalField("start", Json_decode.$$int, json),
          end_: optionalField("end", Json_decode.$$int, json)
        };
}

function party(json) {
  return {
          id: optionalField("id", Json_decode.string, json),
          size: optionalField("size", (function (param) {
                  return Json_decode.array(Json_decode.$$int, param);
                }), json)
        };
}

function assets(json) {
  return {
          largeImage: optionalField("large_image", Json_decode.string, json),
          largeText: optionalField("large_text", Json_decode.string, json),
          smallImage: optionalField("small_image", Json_decode.string, json),
          smallText: optionalField("small_text", Json_decode.string, json)
        };
}

function secrets(json) {
  return {
          join: optionalField("join", Json_decode.string, json),
          spectate: optionalField("spectate", Json_decode.string, json),
          match_: optionalField("match", Json_decode.string, json)
        };
}

function activity(json) {
  return {
          name: Json_decode.field("name", Json_decode.string, json),
          type_: Json_decode.field("type", Json_decode.$$int, json),
          url: optionalField("url", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          timestamps: optionalField("timestamps", timestamps, json),
          applicationId: optionalField("application_id", Json_decode.string, json),
          details: optionalField("details", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          state: optionalField("state", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          party: optionalField("party", party, json),
          assets: optionalField("assets", assets, json),
          secrets: optionalField("secrets", secrets, json),
          instance: optionalField("instance", Json_decode.bool, json),
          flags: optionalField("flags", Json_decode.$$int, json)
        };
}

function clientStatus(json) {
  return {
          desktop: optionalField("desktop", Json_decode.string, json),
          mobile: optionalField("mobile", Json_decode.string, json),
          web: optionalField("web", Json_decode.string, json)
        };
}

function update$1(json) {
  return {
          user: Json_decode.field("user", t, json),
          roles: Json_decode.field("roles", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json),
          game: Json_decode.field("game", (function (param) {
                  return Json_decode.optional(activity, param);
                }), json),
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          status: Json_decode.field("status", Json_decode.string, json),
          activities: Json_decode.field("activities", (function (param) {
                  return Json_decode.array(activity, param);
                }), json),
          clientStatus: Json_decode.field("client_status", clientStatus, json)
        };
}

var Presence$1 = {
  timestamps: timestamps,
  party: party,
  assets: assets,
  secrets: secrets,
  activity: activity,
  clientStatus: clientStatus,
  update: update$1
};

function overwrite(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          type_: Json_decode.field("type", Json_decode.string, json),
          allow: Json_decode.field("allow", Json_decode.$$int, json),
          deny: Json_decode.field("deny", Json_decode.$$int, json)
        };
}

function t$1(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          type_: Json_decode.field("type", Json_decode.$$int, json),
          guildId: optionalField("guild_id", Json_decode.string, json),
          position: optionalField("position", Json_decode.$$int, json),
          permissionOverwrites: optionalField("permission_overwrites", (function (param) {
                  return Json_decode.array(overwrite, param);
                }), json),
          name: optionalField("name", Json_decode.string, json),
          topic: optionalField("topic", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          nsfw: optionalField("nsfw", Json_decode.bool, json),
          lastMessageId: optionalField("last_message_id", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          bitrate: optionalField("bitrate", Json_decode.$$int, json),
          userLimit: optionalField("user_limit", Json_decode.$$int, json),
          rateLimitPerUser: optionalField("rate_limit_per_user", Json_decode.$$int, json),
          recipients: optionalField("recipients", (function (param) {
                  return Json_decode.array(t, param);
                }), json),
          icon: optionalField("icon", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          ownerId: optionalField("owner_id", Json_decode.string, json),
          applicationId: optionalField("application_id", Json_decode.string, json),
          parentId: optionalField("parent_id", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          lastPinTimestamp: optionalField("last_pin_timestamp", Json_decode.date, json)
        };
}

function pinsUpdate(json) {
  return {
          channelId: Json_decode.field("channel_id", Json_decode.string, json),
          lastPinTimestamp: optionalField("last_pin_timestamp", Json_decode.date, json)
        };
}

var Channel$1 = {
  overwrite: overwrite,
  t: t$1,
  create: t$1,
  update: t$1,
  $$delete: t$1,
  pinsUpdate: pinsUpdate
};

function t$2(json) {
  return {
          id: Json_decode.field("id", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          name: Json_decode.field("name", Json_decode.string, json),
          roles: optionalField("roles", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json),
          user: optionalField("user", t, json),
          requireColons: optionalField("require_colons", Json_decode.bool, json),
          managed: optionalField("managed", Json_decode.bool, json),
          animated: optionalField("animated", Json_decode.bool, json)
        };
}

var Emoji$1 = {
  t: t$2
};

var Voice_ = Caml_module.init_mod(/* tuple */[
      "Data.re",
      927,
      6
    ], /* Module */Caml_chrome_debugger.variant("Module", 0, [/* array */[
          /* tuple */[
            /* Function */0,
            "state"
          ],
          /* tuple */[
            /* Function */0,
            "update"
          ],
          /* tuple */[
            /* Function */0,
            "serverUpdate"
          ]
        ]]));

var Guild_ = Caml_module.init_mod(/* tuple */[
      "Data.re",
      965,
      6
    ], /* Module */Caml_chrome_debugger.variant("Module", 0, [/* array */[
          /* tuple */[
            /* Function */0,
            "member"
          ],
          /* tuple */[
            /* Function */0,
            "unavailable"
          ],
          /* tuple */[
            /* Function */0,
            "t"
          ],
          /* tuple */[
            /* Function */0,
            "create"
          ],
          /* tuple */[
            /* Function */0,
            "update"
          ],
          /* tuple */[
            /* Function */0,
            "delete"
          ],
          /* tuple */[
            /* Function */0,
            "banAdd"
          ],
          /* tuple */[
            /* Function */0,
            "banRemove"
          ],
          /* tuple */[
            /* Function */0,
            "emojisUpdate"
          ],
          /* tuple */[
            /* Function */0,
            "integrationsUpdate"
          ],
          /* tuple */[
            /* Function */0,
            "memberAdd"
          ],
          /* tuple */[
            /* Function */0,
            "memberRemove"
          ],
          /* tuple */[
            /* Function */0,
            "memberUpdate"
          ],
          /* tuple */[
            /* Function */0,
            "membersChunk"
          ],
          /* tuple */[
            /* Function */0,
            "roleCreate"
          ],
          /* tuple */[
            /* Function */0,
            "roleUpdate"
          ],
          /* tuple */[
            /* Function */0,
            "roleDelete"
          ]
        ]]));

function state(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          channelId: Json_decode.field("channel_id", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          userId: Json_decode.field("user_id", Json_decode.string, json),
          member: optionalField("member", Guild_.member, json)
        };
}

function serverUpdate(json) {
  return {
          token: Json_decode.field("token", Json_decode.string, json),
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          endpoint: Json_decode.field("endpoint", Json_decode.string, json)
        };
}

Caml_module.update_mod(/* Module */Caml_chrome_debugger.variant("Module", 0, [/* array */[
          /* tuple */[
            /* Function */0,
            "state"
          ],
          /* tuple */[
            /* Function */0,
            "update"
          ],
          /* tuple */[
            /* Function */0,
            "serverUpdate"
          ]
        ]]), Voice_, {
      state: state,
      update: state,
      serverUpdate: serverUpdate
    });

function member(json) {
  return {
          user: Json_decode.field("user", t, json),
          nick: optionalField("nick", Json_decode.string, json),
          roles: Json_decode.field("roles", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json),
          joinedAt: Json_decode.field("joined_at", Json_decode.date, json),
          deaf: Json_decode.field("deaf", Json_decode.bool, json),
          mute: Json_decode.field("mute", Json_decode.bool, json)
        };
}

function unavailable(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          unavailable: Json_decode.field("unavailable", Json_decode.bool, json)
        };
}

function t$3(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          name: Json_decode.field("name", Json_decode.string, json),
          icon: Json_decode.field("icon", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          splash: Json_decode.field("splash", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          owner: optionalField("owner", Json_decode.bool, json),
          ownerId: Json_decode.field("owner_id", Json_decode.string, json),
          permissions: optionalField("permissions", Json_decode.$$int, json),
          region: Json_decode.field("region", Json_decode.string, json),
          afkChannelId: Json_decode.field("afk_channel_id", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          afkTimeout: Json_decode.field("afk_timeout", Json_decode.$$int, json),
          embedEnabled: optionalField("embed_enabled", Json_decode.bool, json),
          embedChannelId: optionalField("embed_channel_id", Json_decode.string, json),
          verificationLevel: Json_decode.field("verification_level", Json_decode.$$int, json),
          defaultMessageNotifications: Json_decode.field("default_message_notifications", Json_decode.$$int, json),
          explicitContentFilter: Json_decode.field("explicit_content_filter", Json_decode.$$int, json),
          roles: Json_decode.field("roles", (function (param) {
                  return Json_decode.array(role, param);
                }), json),
          emojis: Json_decode.field("emojis", (function (param) {
                  return Json_decode.array(t$2, param);
                }), json),
          features: Json_decode.field("features", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json),
          mfaLevel: Json_decode.field("mfa_level", Json_decode.$$int, json),
          applicationId: Json_decode.field("application_id", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          widgetEnabled: optionalField("widget_enabled", Json_decode.bool, json),
          widgetChannelId: optionalField("widget_channel_id", Json_decode.string, json),
          systemChannelId: Json_decode.field("system_channel_id", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          joinedAt: optionalField("joined_at", Json_decode.date, json),
          large: optionalField("large", Json_decode.bool, json),
          unavailable: optionalField("unavailable", Json_decode.bool, json),
          memberCount: optionalField("member_count", Json_decode.$$int, json),
          voiceStates: optionalField("voice_states", (function (param) {
                  return Json_decode.array(Voice_.state, param);
                }), json),
          members: optionalField("members", (function (param) {
                  return Json_decode.array(member, param);
                }), json),
          channels: optionalField("channels", (function (param) {
                  return Json_decode.array(t$1, param);
                }), json),
          presences: optionalField("presences", (function (param) {
                  return Json_decode.array(update$1, param);
                }), json),
          maxPresences: optionalField("max_presences", (function (param) {
                  return Json_decode.optional(Json_decode.$$int, param);
                }), json),
          maxMembers: optionalField("max_members", Json_decode.$$int, json),
          vanityUrlCode: Json_decode.field("vanity_url_code", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          description: Json_decode.field("description", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          banner: Json_decode.field("banner", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json)
        };
}

function banAdd(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          user: Json_decode.field("user", t, json)
        };
}

function banRemove(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          user: Json_decode.field("user", t, json)
        };
}

function emojisUpdate(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          emojis: Json_decode.field("emojis", (function (param) {
                  return Json_decode.array(t$2, param);
                }), json)
        };
}

function integrationsUpdate(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json)
        };
}

function memberAdd(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          member: member(json)
        };
}

function memberRemove(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          user: Json_decode.field("user", t, json)
        };
}

function memberUpdate(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          roles: Json_decode.field("roles", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json),
          user: Json_decode.field("user", t, json),
          nick: Json_decode.field("nick", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json)
        };
}

function membersChunk(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          members: Json_decode.field("members", (function (param) {
                  return Json_decode.array(member, param);
                }), json)
        };
}

function roleCreate(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          role: Json_decode.field("role", role, json)
        };
}

function roleUpdate(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          role: Json_decode.field("role", role, json)
        };
}

function roleDelete(json) {
  return {
          guildId: Json_decode.field("guild_id", Json_decode.string, json),
          roleId: Json_decode.field("role_id", Json_decode.string, json)
        };
}

Caml_module.update_mod(/* Module */Caml_chrome_debugger.variant("Module", 0, [/* array */[
          /* tuple */[
            /* Function */0,
            "member"
          ],
          /* tuple */[
            /* Function */0,
            "unavailable"
          ],
          /* tuple */[
            /* Function */0,
            "t"
          ],
          /* tuple */[
            /* Function */0,
            "create"
          ],
          /* tuple */[
            /* Function */0,
            "update"
          ],
          /* tuple */[
            /* Function */0,
            "delete"
          ],
          /* tuple */[
            /* Function */0,
            "banAdd"
          ],
          /* tuple */[
            /* Function */0,
            "banRemove"
          ],
          /* tuple */[
            /* Function */0,
            "emojisUpdate"
          ],
          /* tuple */[
            /* Function */0,
            "integrationsUpdate"
          ],
          /* tuple */[
            /* Function */0,
            "memberAdd"
          ],
          /* tuple */[
            /* Function */0,
            "memberRemove"
          ],
          /* tuple */[
            /* Function */0,
            "memberUpdate"
          ],
          /* tuple */[
            /* Function */0,
            "membersChunk"
          ],
          /* tuple */[
            /* Function */0,
            "roleCreate"
          ],
          /* tuple */[
            /* Function */0,
            "roleUpdate"
          ],
          /* tuple */[
            /* Function */0,
            "roleDelete"
          ]
        ]]), Guild_, {
      member: member,
      unavailable: unavailable,
      t: t$3,
      create: t$3,
      update: t$3,
      $$delete: unavailable,
      banAdd: banAdd,
      banRemove: banRemove,
      emojisUpdate: emojisUpdate,
      integrationsUpdate: integrationsUpdate,
      memberAdd: memberAdd,
      memberRemove: memberRemove,
      memberUpdate: memberUpdate,
      membersChunk: membersChunk,
      roleCreate: roleCreate,
      roleUpdate: roleUpdate,
      roleDelete: roleDelete
    });

function attachment(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          filename: Json_decode.field("filename", Json_decode.string, json),
          size: Json_decode.field("size", Json_decode.$$int, json),
          url: Json_decode.field("url", Json_decode.string, json),
          proxyUrl: Json_decode.field("proxy_url", Json_decode.string, json),
          height: Json_decode.field("height", (function (param) {
                  return Json_decode.optional(Json_decode.$$int, param);
                }), json),
          width: Json_decode.field("width", (function (param) {
                  return Json_decode.optional(Json_decode.$$int, param);
                }), json)
        };
}

function embedFooter(json) {
  return {
          text: Json_decode.field("text", Json_decode.string, json),
          iconUrl: optionalField("icon_url", Json_decode.string, json),
          proxyIconUrl: optionalField("proxy_icon_url", Json_decode.string, json)
        };
}

function embedImage(json) {
  return {
          url: optionalField("url", Json_decode.string, json),
          proxyUrl: optionalField("proxy_url", Json_decode.string, json),
          height: optionalField("height", Json_decode.$$int, json),
          width: optionalField("width", Json_decode.$$int, json)
        };
}

function embedThumbnail(json) {
  return {
          url: optionalField("url", Json_decode.string, json),
          proxyUrl: optionalField("proxy_url", Json_decode.string, json),
          height: optionalField("height", Json_decode.$$int, json),
          width: optionalField("width", Json_decode.$$int, json)
        };
}

function embedVideo(json) {
  return {
          url: optionalField("url", Json_decode.string, json),
          height: optionalField("height", Json_decode.$$int, json),
          width: optionalField("width", Json_decode.$$int, json)
        };
}

function embedProvider(json) {
  return {
          name: optionalField("name", Json_decode.string, json),
          url: optionalField("url", Json_decode.string, json)
        };
}

function embedAuthor(json) {
  return {
          name: optionalField("name", Json_decode.string, json),
          url: optionalField("url", Json_decode.string, json),
          iconUrl: optionalField("icon_url", Json_decode.string, json),
          proxyIconUrl: optionalField("proxy_icon_url", Json_decode.string, json)
        };
}

function embedField(json) {
  return {
          name: Json_decode.field("name", Json_decode.string, json),
          value: Json_decode.field("value", Json_decode.string, json),
          inline: optionalField("inline", Json_decode.bool, json)
        };
}

function embed(json) {
  return {
          title: optionalField("title", Json_decode.string, json),
          type_: optionalField("type", Json_decode.string, json),
          description: optionalField("description", Json_decode.string, json),
          url: optionalField("url", Json_decode.string, json),
          timestamp: optionalField("timestamp", Json_decode.date, json),
          color: optionalField("color", Json_decode.$$int, json),
          footer: optionalField("footer", embedFooter, json),
          image: optionalField("image", embedImage, json),
          thumbnail: optionalField("thumbnail", embedThumbnail, json),
          video: optionalField("video", embedVideo, json),
          provider: optionalField("provider", embedProvider, json),
          author: optionalField("author", embedAuthor, json),
          field: optionalField("field", (function (param) {
                  return Json_decode.array(embedField, param);
                }), json)
        };
}

function reaction(json) {
  return {
          count: Json_decode.field("count", Json_decode.$$int, json),
          me: Json_decode.field("me", Json_decode.bool, json),
          emoji: Json_decode.field("emoji", t$2, json)
        };
}

function activity$1(json) {
  return {
          type_: Json_decode.field("type", Json_decode.$$int, json),
          partyId: optionalField("party_id", Json_decode.string, json)
        };
}

function application(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          coverImage: optionalField("cover_image", Json_decode.string, json),
          description: Json_decode.field("description", Json_decode.string, json),
          icon: Json_decode.field("icon", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          name: Json_decode.field("name", Json_decode.string, json)
        };
}

function t$4(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          channelId: Json_decode.field("channel_id", Json_decode.string, json),
          guildId: optionalField("guild_id", Json_decode.string, json),
          author: Json_decode.field("author", t, json),
          member: optionalField("member", Guild_.member, json),
          content: Json_decode.field("content", Json_decode.string, json),
          timestamp: Json_decode.field("timestamp", Json_decode.date, json),
          editedTimestamp: Json_decode.field("edited_timestamp", (function (param) {
                  return Json_decode.optional(Json_decode.date, param);
                }), json),
          tts: Json_decode.field("tts", Json_decode.bool, json),
          mentionEveryone: Json_decode.field("mention_everyone", Json_decode.bool, json),
          mentions: Json_decode.field("mentions", (function (param) {
                  return Json_decode.array(t, param);
                }), json),
          mentionRoles: Json_decode.field("mention_roles", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json),
          attachments: Json_decode.field("attachments", (function (param) {
                  return Json_decode.array(attachment, param);
                }), json),
          embeds: Json_decode.field("embeds", (function (param) {
                  return Json_decode.array(embed, param);
                }), json),
          reactions: optionalField("reactions", (function (param) {
                  return Json_decode.array(reaction, param);
                }), json),
          nonce: optionalField("nonce", (function (param) {
                  return Json_decode.optional(Json_decode.string, param);
                }), json),
          pinned: Json_decode.field("pinned", Json_decode.bool, json),
          webhookId: optionalField("webhook_id", Json_decode.string, json),
          type_: Json_decode.field("type", Json_decode.$$int, json),
          activity: optionalField("activity", activity$1, json),
          application: optionalField("application", application, json)
        };
}

function $$delete(json) {
  return {
          id: Json_decode.field("id", Json_decode.string, json),
          channelId: Json_decode.field("channel_id", Json_decode.string, json),
          guildId: Json_decode.field("guild_id", Json_decode.string, json)
        };
}

function deleteBulk(json) {
  return {
          ids: Json_decode.field("ids", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json),
          channelId: Json_decode.field("channel_id", Json_decode.string, json),
          guildId: Json_decode.field("guild_id", Json_decode.string, json)
        };
}

function reactionAdd(json) {
  return {
          userId: Json_decode.field("user_id", Json_decode.string, json),
          channelId: Json_decode.field("channel_id", Json_decode.string, json),
          messageId: Json_decode.field("message_id", Json_decode.string, json),
          guildId: optionalField("guild_id", Json_decode.string, json),
          emoji: Json_decode.field("emoji", t$2, json)
        };
}

function reactionRemove(json) {
  return {
          userId: Json_decode.field("user_id", Json_decode.string, json),
          channelId: Json_decode.field("channel_id", Json_decode.string, json),
          messageId: Json_decode.field("message_id", Json_decode.string, json),
          guildId: optionalField("guild_id", Json_decode.string, json),
          emoji: Json_decode.field("emoji", t$2, json)
        };
}

function reactionRemoveAll(json) {
  return {
          channelId: Json_decode.field("channel_id", Json_decode.string, json),
          messageId: Json_decode.field("message_id", Json_decode.string, json),
          guildId: optionalField("guild_id", Json_decode.string, json)
        };
}

var Message$1 = {
  attachment: attachment,
  embedFooter: embedFooter,
  embedImage: embedImage,
  embedThumbnail: embedThumbnail,
  embedVideo: embedVideo,
  embedProvider: embedProvider,
  embedAuthor: embedAuthor,
  embedField: embedField,
  embed: embed,
  reaction: reaction,
  activity: activity$1,
  application: application,
  t: t$4,
  create: t$4,
  update: t$4,
  $$delete: $$delete,
  deleteBulk: deleteBulk,
  reactionAdd: reactionAdd,
  reactionRemove: reactionRemove,
  reactionRemoveAll: reactionRemoveAll
};

function ready(json) {
  return {
          v: Json_decode.field("v", Json_decode.$$int, json),
          user: Json_decode.field("user", t, json),
          privateChannels: Json_decode.field("private_channels", (function (param) {
                  return Json_decode.array((function (param) {
                                return /* () */0;
                              }), param);
                }), json),
          guilds: Json_decode.field("guilds", (function (param) {
                  return Json_decode.array(Guild_.unavailable, param);
                }), json),
          sessionId: Json_decode.field("session_id", Json_decode.string, json),
          trace: Json_decode.field("_trace", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json),
          shard: optionalField("shard", (function (param) {
                  return Json_decode.array(Json_decode.$$int, param);
                }), json)
        };
}

function resumed(json) {
  return {
          trace: Json_decode.field("_trace", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json)
        };
}

function typingStart(json) {
  return {
          channelId: Json_decode.field("channel_id", Json_decode.string, json),
          guildId: optionalField("guild_id", Json_decode.string, json),
          userId: Json_decode.field("user_id", Json_decode.string, json),
          timestamp: Json_decode.field("timestamp", Json_decode.$$int, json)
        };
}

function hello(json) {
  return {
          heartbeatInterval: Json_decode.field("heartbeat_interval", Json_decode.$$int, json),
          trace: Json_decode.field("_trace", (function (param) {
                  return Json_decode.array(Json_decode.string, param);
                }), json)
        };
}

function data(json) {
  return {
          op: Json_decode.field("op", Json_decode.$$int, json),
          d: Json_decode.field("d", (function (j) {
                  var match = Json_decode.field("op", Json_decode.$$int, json);
                  switch (match) {
                    case 0 :
                        var match$1 = Json_decode.field("t", Json_decode.string, json);
                        var tmp;
                        switch (match$1) {
                          case "CHANNEL_CREATE" :
                              tmp = /* ChannelCreate */Caml_chrome_debugger.variant("ChannelCreate", 2, [t$1(j)]);
                              break;
                          case "CHANNEL_DELETE" :
                              tmp = /* ChannelDelete */Caml_chrome_debugger.variant("ChannelDelete", 4, [t$1(j)]);
                              break;
                          case "CHANNEL_PINS_UPDATE" :
                              tmp = /* ChannelPinsUpdate */Caml_chrome_debugger.variant("ChannelPinsUpdate", 5, [pinsUpdate(j)]);
                              break;
                          case "CHANNEL_UPDATE" :
                              tmp = /* ChannelUpdate */Caml_chrome_debugger.variant("ChannelUpdate", 3, [t$1(j)]);
                              break;
                          case "GUILD_BAN_ADD" :
                              tmp = /* GuildBanAdd */Caml_chrome_debugger.variant("GuildBanAdd", 9, [Curry._1(Guild_.banAdd, j)]);
                              break;
                          case "GUILD_BAN_REMOVE" :
                              tmp = /* GuildBanRemove */Caml_chrome_debugger.variant("GuildBanRemove", 10, [Curry._1(Guild_.banRemove, j)]);
                              break;
                          case "GUILD_CREATE" :
                              tmp = /* GuildCreate */Caml_chrome_debugger.variant("GuildCreate", 6, [Curry._1(Guild_.create, j)]);
                              break;
                          case "GUILD_DELETE" :
                              tmp = /* GuildDelete */Caml_chrome_debugger.variant("GuildDelete", 8, [Curry._1(Guild_.$$delete, j)]);
                              break;
                          case "GUILD_EMOJIS_UPDATE" :
                              tmp = /* GuildEmojisUpdate */Caml_chrome_debugger.variant("GuildEmojisUpdate", 11, [Curry._1(Guild_.emojisUpdate, j)]);
                              break;
                          case "GUILD_INTEGRATIONS_UPDATE" :
                              tmp = /* GuildIntegrationsUpdate */Caml_chrome_debugger.variant("GuildIntegrationsUpdate", 12, [Curry._1(Guild_.integrationsUpdate, j)]);
                              break;
                          case "GUILD_MEMBERS_CHUNK" :
                              tmp = /* GuildMembersChunk */Caml_chrome_debugger.variant("GuildMembersChunk", 16, [Curry._1(Guild_.membersChunk, j)]);
                              break;
                          case "GUILD_MEMBER_ADD" :
                              tmp = /* GuildMemberAdd */Caml_chrome_debugger.variant("GuildMemberAdd", 13, [Curry._1(Guild_.memberAdd, j)]);
                              break;
                          case "GUILD_MEMBER_REMOVE" :
                              tmp = /* GuildMemberRemove */Caml_chrome_debugger.variant("GuildMemberRemove", 14, [Curry._1(Guild_.memberRemove, j)]);
                              break;
                          case "GUILD_MEMBER_UPDATE" :
                              tmp = /* GuildMemberUpdate */Caml_chrome_debugger.variant("GuildMemberUpdate", 15, [Curry._1(Guild_.memberUpdate, j)]);
                              break;
                          case "GUILD_ROLE_CREATE" :
                              tmp = /* GuildRoleCreate */Caml_chrome_debugger.variant("GuildRoleCreate", 17, [Curry._1(Guild_.roleCreate, j)]);
                              break;
                          case "GUILD_ROLE_DELETE" :
                              tmp = /* GuildRoleDelete */Caml_chrome_debugger.variant("GuildRoleDelete", 19, [Curry._1(Guild_.roleDelete, j)]);
                              break;
                          case "GUILD_ROLE_UPDATE" :
                              tmp = /* GuildRoleUpdate */Caml_chrome_debugger.variant("GuildRoleUpdate", 18, [Curry._1(Guild_.roleUpdate, j)]);
                              break;
                          case "GUILD_UPDATE" :
                              tmp = /* GuildUpdate */Caml_chrome_debugger.variant("GuildUpdate", 7, [Curry._1(Guild_.update, j)]);
                              break;
                          case "MESSAGE_CREATE" :
                              tmp = /* MessageCreate */Caml_chrome_debugger.variant("MessageCreate", 20, [t$4(j)]);
                              break;
                          case "MESSAGE_DELETE" :
                              tmp = /* MessageDelete */Caml_chrome_debugger.variant("MessageDelete", 22, [$$delete(j)]);
                              break;
                          case "MESSAGE_DELETE_BULK" :
                              tmp = /* MessageDeleteBulk */Caml_chrome_debugger.variant("MessageDeleteBulk", 23, [deleteBulk(j)]);
                              break;
                          case "MESSAGE_REACTION_ADD" :
                              tmp = /* MessageReactionAdd */Caml_chrome_debugger.variant("MessageReactionAdd", 24, [reactionAdd(j)]);
                              break;
                          case "MESSAGE_REACTION_REMOVE" :
                              tmp = /* MessageReactionRemove */Caml_chrome_debugger.variant("MessageReactionRemove", 25, [reactionRemove(j)]);
                              break;
                          case "MESSAGE_REACTION_REMOVE_ALL" :
                              tmp = /* MessageReactionRemoveAll */Caml_chrome_debugger.variant("MessageReactionRemoveAll", 26, [reactionRemoveAll(j)]);
                              break;
                          case "MESSAGE_UPDATE" :
                              tmp = /* MessageUpdate */Caml_chrome_debugger.variant("MessageUpdate", 21, [t$4(j)]);
                              break;
                          case "PRESENCE_UPDATE" :
                              tmp = /* PresenceUpdate */Caml_chrome_debugger.variant("PresenceUpdate", 27, [update$1(j)]);
                              break;
                          case "READY" :
                              tmp = /* Ready */Caml_chrome_debugger.variant("Ready", 0, [ready(j)]);
                              break;
                          case "RESUMED" :
                              tmp = /* Resumed */Caml_chrome_debugger.variant("Resumed", 1, [resumed(j)]);
                              break;
                          case "TYPING_START" :
                              tmp = /* TypingStart */Caml_chrome_debugger.variant("TypingStart", 28, [typingStart(j)]);
                              break;
                          case "USER_UPDATE" :
                              tmp = /* UserUpdate */Caml_chrome_debugger.variant("UserUpdate", 29, [t(j)]);
                              break;
                          case "VOICE_SERVER_UPDATE" :
                              tmp = /* VoiceServerUpdate */Caml_chrome_debugger.variant("VoiceServerUpdate", 31, [Curry._1(Voice_.serverUpdate, j)]);
                              break;
                          case "VOICE_STATE_UPDATE" :
                              tmp = /* VoiceStateUpdate */Caml_chrome_debugger.variant("VoiceStateUpdate", 30, [Curry._1(Voice_.update, j)]);
                              break;
                          case "WebhooksUpdate" :
                              tmp = /* WebhooksUpdate */Caml_chrome_debugger.variant("WebhooksUpdate", 32, [update(j)]);
                              break;
                          default:
                            throw [
                                  UnknownMessage,
                                  "Unknown dispatch " + JSON.stringify(json)
                                ];
                        }
                        return /* Dispatch */Caml_chrome_debugger.variant("Dispatch", 0, [tmp]);
                    case 7 :
                        return /* Reconnect */0;
                    case 1 :
                    case 2 :
                    case 3 :
                    case 4 :
                    case 5 :
                    case 6 :
                    case 8 :
                        break;
                    case 9 :
                        return /* InvalidSession */Caml_chrome_debugger.variant("InvalidSession", 8, [Json_decode.bool(j)]);
                    case 10 :
                        return /* Hello */Caml_chrome_debugger.variant("Hello", 9, [hello(j)]);
                    case 11 :
                        return /* Ack */1;
                    default:
                      
                  }
                  throw [
                        UnknownMessage,
                        "Unknown op " + JSON.stringify(json)
                      ];
                }), json),
          s: optionalField("s", Json_decode.$$int, json),
          t: optionalField("t", Json_decode.string, json)
        };
}

var Decode = {
  optionalField: optionalField,
  Webhook: Webhook$1,
  $$Permissions: $$Permissions$1,
  User: User$1,
  Presence: Presence$1,
  Channel: Channel$1,
  Emoji: Emoji$1,
  Voice_: Voice_,
  Guild_: Guild_,
  Voice: /* alias */0,
  Guild: /* alias */0,
  Message: Message$1,
  ready: ready,
  resumed: resumed,
  typingStart: typingStart,
  hello: hello,
  data: data
};

function required(encoder, r) {
  return /* Field */Caml_chrome_debugger.simpleVariant("Field", [Curry._1(encoder, r)]);
}

function optional(encoder, r) {
  if (r) {
    return /* Field */Caml_chrome_debugger.simpleVariant("Field", [Curry._1(encoder, r[0])]);
  } else {
    return /* Missing */0;
  }
}

function nullOpt(encoder, r) {
  if (r !== undefined) {
    return Curry._1(encoder, Caml_option.valFromOption(r));
  } else {
    return null;
  }
}

function objectOpt(fields) {
  return Json_encode.object_(List.fold_right((function (b, a) {
                    var match = b[1];
                    if (match) {
                      return /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* tuple */[
                                  b[0],
                                  match[0]
                                ],
                                a
                              ]);
                    } else {
                      return a;
                    }
                  }), fields, /* [] */0));
}

function timestamps$1(r) {
  return objectOpt(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "start",
                  optional((function (prim) {
                          return prim;
                        }), r.start)
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "end",
                      optional((function (prim) {
                              return prim;
                            }), r.end_)
                    ],
                    /* [] */0
                  ])
              ]));
}

function party$1(r) {
  return objectOpt(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "id",
                  optional((function (prim) {
                          return prim;
                        }), r.id)
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "size",
                      optional((function (param) {
                              return Json_encode.array((function (prim) {
                                            return prim;
                                          }), param);
                            }), r.size)
                    ],
                    /* [] */0
                  ])
              ]));
}

function assets$1(r) {
  return objectOpt(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "large_image",
                  optional((function (prim) {
                          return prim;
                        }), r.largeImage)
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "large_text",
                      optional((function (prim) {
                              return prim;
                            }), r.largeText)
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "small_image",
                          optional((function (prim) {
                                  return prim;
                                }), r.smallImage)
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "small_text",
                              optional((function (prim) {
                                      return prim;
                                    }), r.smallText)
                            ],
                            /* [] */0
                          ])
                      ])
                  ])
              ]));
}

function secrets$1(r) {
  return objectOpt(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "join",
                  optional((function (prim) {
                          return prim;
                        }), r.join)
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "spectate",
                      optional((function (prim) {
                              return prim;
                            }), r.spectate)
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "match",
                          optional((function (prim) {
                                  return prim;
                                }), r.match_)
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

function activity$2(r) {
  return objectOpt(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "name",
                  /* Field */Caml_chrome_debugger.simpleVariant("Field", [r.name])
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "type",
                      /* Field */Caml_chrome_debugger.simpleVariant("Field", [r.type_])
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "url",
                          optional((function (param) {
                                  return nullOpt((function (prim) {
                                                return prim;
                                              }), param);
                                }), r.url)
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "timestamps",
                              optional(timestamps$1, r.timestamps)
                            ],
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* tuple */[
                                  "application_id",
                                  optional((function (prim) {
                                          return prim;
                                        }), r.applicationId)
                                ],
                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* tuple */[
                                      "details",
                                      optional((function (param) {
                                              return nullOpt((function (prim) {
                                                            return prim;
                                                          }), param);
                                            }), r.details)
                                    ],
                                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                        /* tuple */[
                                          "state",
                                          optional((function (param) {
                                                  return nullOpt((function (prim) {
                                                                return prim;
                                                              }), param);
                                                }), r.state)
                                        ],
                                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                            /* tuple */[
                                              "party",
                                              optional(party$1, r.party)
                                            ],
                                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                /* tuple */[
                                                  "assets",
                                                  optional(assets$1, r.assets)
                                                ],
                                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                    /* tuple */[
                                                      "secrets",
                                                      optional(secrets$1, r.secrets)
                                                    ],
                                                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                        /* tuple */[
                                                          "instance",
                                                          optional((function (prim) {
                                                                  return prim;
                                                                }), r.instance)
                                                        ],
                                                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                                            /* tuple */[
                                                              "flags",
                                                              optional((function (prim) {
                                                                      return prim;
                                                                    }), r.flags)
                                                            ],
                                                            /* [] */0
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ])
                  ])
              ]));
}

var Presence$2 = {
  timestamps: timestamps$1,
  party: party$1,
  assets: assets$1,
  secrets: secrets$1,
  activity: activity$2
};

function updateStatus(r) {
  return objectOpt(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "since",
                  /* Field */Caml_chrome_debugger.simpleVariant("Field", [nullOpt((function (prim) {
                              return prim;
                            }), r.since)])
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "game",
                      /* Field */Caml_chrome_debugger.simpleVariant("Field", [nullOpt(activity$2, r.game)])
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "status",
                          /* Field */Caml_chrome_debugger.simpleVariant("Field", [r.status])
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "afk",
                              /* Field */Caml_chrome_debugger.simpleVariant("Field", [r.afk])
                            ],
                            /* [] */0
                          ])
                      ])
                  ])
              ]));
}

function heartbeat(param) {
  return nullOpt((function (prim) {
                return prim;
              }), param);
}

function props(r) {
  return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "$os",
                  r.os
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "$browser",
                      r.browser
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "$device",
                          r.device
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

function identify(r) {
  return objectOpt(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "token",
                  /* Field */Caml_chrome_debugger.simpleVariant("Field", [r.token])
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "properties",
                      /* Field */Caml_chrome_debugger.simpleVariant("Field", [props(r.properties)])
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "compress",
                          optional((function (prim) {
                                  return prim;
                                }), r.compress)
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "large_threshold",
                              optional((function (prim) {
                                      return prim;
                                    }), r.largeThreshold)
                            ],
                            /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                /* tuple */[
                                  "shard",
                                  optional((function (param) {
                                          return Json_encode.array((function (prim) {
                                                        return prim;
                                                      }), param);
                                        }), r.shard)
                                ],
                                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                                    /* tuple */[
                                      "presence",
                                      optional(updateStatus, r.presence)
                                    ],
                                    /* [] */0
                                  ])
                              ])
                          ])
                      ])
                  ])
              ]));
}

function statusUpdate(r) {
  return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "since",
                  nullOpt((function (prim) {
                          return prim;
                        }), r.since)
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "game",
                      nullOpt(activity$2, r.game)
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "status",
                          r.status
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "afk",
                              r.afk
                            ],
                            /* [] */0
                          ])
                      ])
                  ])
              ]));
}

function voiceStateUpdate(r) {
  return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "guild_id",
                  r.guildId
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "channel_id",
                      nullOpt((function (prim) {
                              return prim;
                            }), r.channelId)
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "self_mute",
                          r.selfMute
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "self_deaf",
                              r.selfDeaf
                            ],
                            /* [] */0
                          ])
                      ])
                  ])
              ]));
}

function resume(r) {
  return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "token",
                  r.token
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "session_id",
                      r.sessionId
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "seq",
                          r.seq
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

function requestGuildMembers(r) {
  return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "guild_id",
                  r.guildId
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "query",
                      r.query
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "limit",
                          r.limit
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

function requestGuildMembersBulk(r) {
  return Json_encode.object_(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "guild_id",
                  Json_encode.array((function (prim) {
                          return prim;
                        }), r.guildId)
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "query",
                      r.query
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "limit",
                          r.limit
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

function data$1(r) {
  var match = r.d;
  var tmp;
  if (typeof match === "number") {
    tmp = /* Missing */0;
  } else {
    switch (match.tag | 0) {
      case /* Heartbeat */1 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [nullOpt((function (prim) {
                      return prim;
                    }), match[0])]);
          break;
      case /* Identify */2 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [identify(match[0])]);
          break;
      case /* StatusUpdate */3 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [statusUpdate(match[0])]);
          break;
      case /* UpdateVoiceState */4 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [voiceStateUpdate(match[0])]);
          break;
      case /* Resume */5 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [resume(match[0])]);
          break;
      case /* RequestGuildMembers */6 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [requestGuildMembers(match[0])]);
          break;
      case /* RequestGuildMembersBulk */7 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [requestGuildMembersBulk(match[0])]);
          break;
      default:
        tmp = /* Missing */0;
    }
  }
  return objectOpt(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "op",
                  /* Field */Caml_chrome_debugger.simpleVariant("Field", [r.op])
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "d",
                      tmp
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "s",
                          optional((function (prim) {
                                  return prim;
                                }), r.s)
                        ],
                        /* :: */Caml_chrome_debugger.simpleVariant("::", [
                            /* tuple */[
                              "t",
                              optional((function (prim) {
                                      return prim;
                                    }), r.t)
                            ],
                            /* [] */0
                          ])
                      ])
                  ])
              ]));
}

function dataFromPayload(r) {
  var r$1 = op_of_payload(r);
  var tmp;
  if (typeof r === "number") {
    tmp = /* Missing */0;
  } else {
    switch (r.tag | 0) {
      case /* Heartbeat */1 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [nullOpt((function (prim) {
                      return prim;
                    }), r[0])]);
          break;
      case /* Identify */2 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [identify(r[0])]);
          break;
      case /* StatusUpdate */3 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [statusUpdate(r[0])]);
          break;
      case /* UpdateVoiceState */4 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [voiceStateUpdate(r[0])]);
          break;
      case /* Resume */5 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [resume(r[0])]);
          break;
      case /* RequestGuildMembers */6 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [requestGuildMembers(r[0])]);
          break;
      case /* RequestGuildMembersBulk */7 :
          tmp = /* Field */Caml_chrome_debugger.simpleVariant("Field", [requestGuildMembersBulk(r[0])]);
          break;
      default:
        tmp = /* Missing */0;
    }
  }
  return objectOpt(/* :: */Caml_chrome_debugger.simpleVariant("::", [
                /* tuple */[
                  "op",
                  /* Field */Caml_chrome_debugger.simpleVariant("Field", [r$1])
                ],
                /* :: */Caml_chrome_debugger.simpleVariant("::", [
                    /* tuple */[
                      "d",
                      tmp
                    ],
                    /* :: */Caml_chrome_debugger.simpleVariant("::", [
                        /* tuple */[
                          "t",
                          optional((function (prim) {
                                  return prim;
                                }), t_of_payload(r))
                        ],
                        /* [] */0
                      ])
                  ])
              ]));
}

var Encode = {
  required: required,
  optional: optional,
  nullOpt: nullOpt,
  objectOpt: objectOpt,
  Presence: Presence$2,
  updateStatus: updateStatus,
  heartbeat: heartbeat,
  props: props,
  identify: identify,
  statusUpdate: statusUpdate,
  voiceStateUpdate: voiceStateUpdate,
  resume: resume,
  requestGuildMembers: requestGuildMembers,
  requestGuildMembersBulk: requestGuildMembersBulk,
  data: data$1,
  dataFromPayload: dataFromPayload
};

var Voice = /* () */0;

var Guild = /* () */0;

exports.Webhook = Webhook;
exports.$$Permissions = $$Permissions;
exports.User = User;
exports.Presence = Presence;
exports.Channel = Channel;
exports.Emoji = Emoji;
exports.Voice = Voice;
exports.Guild = Guild;
exports.Message = Message;
exports.UnknownMessage = UnknownMessage;
exports.op_of_payload = op_of_payload;
exports.t_of_payload = t_of_payload;
exports.Decode = Decode;
exports.Encode = Encode;
/* Voice_ Not a pure module */
